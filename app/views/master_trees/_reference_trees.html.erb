<div class="tree-column">
  <div id="treewrap-right">
  <div id="tabs" class="ui-tabs ui-widget ui-widget-content ui-corner-all">
    <ul id="tab-titles" class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all">
      <li class="ui-state-default ui-corner-top">
        <a href="#" id="all-tabs">All working trees</a>

        <ul id="working-trees">
          <% @master_tree.reference_trees.each do |reference_tree| %>
            <li><a href="#<%= dom_id(reference_tree) %>"><%= reference_tree.title %></a></li>
          <% end %>
        </ul>
      </li>
      <li id="trash" class="ui-state-default ui-corner-top"><a href="#trash-tab">Trash</a></li>
      <li id="import" class="ui-state-default ui-corner-top ui-tabs-selected ui-state-active"><a href="#new-tab">Import</a></li>
    </ul>

    <!-- Start tab content -->
    <% @master_tree.reference_trees.each do |reference_tree| %>
      <%= render :partial => 'reference_trees/reference_tree', :locals => { :reference_tree => reference_tree } %>
    <% end %>
    <!-- End of reference trees tabs -->
    <div id="new-tab" class="ui-tabs-panel ui-widget-content ui-corner-bottom">
        <%= render :template => 'imports/new', :layout => 'layouts/right_tree' %>
    </div>
    <!-- End of tabs-new tab -->
    <div id="trash-tab" class="ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide">
      <div class="tree-background dark">
        <div class="breadcrumbs">
          <ul>
            <li>Trash Bin</li>
          </ul>
        </div>
        <p class="no_content_message">Your Trash Bin is currently Empty.</p>
      </div>
   </div>
   <!-- End of trash tab -->
</div>

<% content_for :javascript do %>
  <script type="text/javascript" class="source">
     $(document).ready(function() {

      $("#import-roots-button").click(function() {
        var imports = $("#import-roots").val().split("\n")
         $.ajax({
           type: "POST",
           url: "<%= reference_trees_path(:format => 'json') %>",
           contentType: "application/json",
           dataType: 'json',
           data: JSON.stringify({reference_tree: {title: "List",
                                                  master_tree_id: <%= @master_tree.id %>},
                                 nodes_list: imports}),
           success: function(data, textStatus, xhr) {
           location.reload();
           }
         });
      });

    <% @master_tree.reference_trees.each do |reference_tree| %>
      $("#<%= dom_id(reference_tree, 'container_for') %>").jstree({
        "json_data": {
          "ajax": {
            "url": "<%= reference_tree_nodes_path(:reference_tree_id => reference_tree.id, :format => 'json') %>",
            "data" : function (node) {
              if (node.attr) {
                return { parent_id : node.attr("id") };
              } else {
                return {};
              }
            }
          },
        },
        "crrm": {
          "move": {
            "check_move": function(move) { return false; },
            "always_copy": "multitree"
          },
        },
        "plugins" : [ "themes", "json_data", "ui", "dnd", "crrm"]

      });

      $("#<%= dom_id(reference_tree, 'container_for') %> .jstree-clicked").live('click', function() {
        var self     = $(this);
        var metadata = $("#<%= dom_id(reference_tree) %> .node-metadata");

        metadata.spinner();

        $.getJSON('/reference_trees/<%= reference_tree.id %>/nodes/' + self.parent('li').attr('id'), function(data) {
          var rank             = $.trim(data.rank);
          var synonyms         = data.synonyms;
          var vernacular_names = data.vernacular_names;

          metadata.find('.metadata-section ul').empty();

          if (synonyms.length == 0) {
            metadata.find('.metadata-synonyms ul').append('<li>None</li>');
          } else {
            $.each(synonyms, function(index, synonym) {
              metadata.find('.metadata-synonyms ul').append('<li>' + synonym + '</li>');
            });
          }

          if (vernacular_names.length == 0) {
            metadata.find('.metadata-vernacular-names ul').append('<li>None</li>');
          } else {
            $.each(vernacular_names, function(index, vernacular_name) {
              metadata.find('.metadata-vernacular-names ul').append('<li>' + vernacular_name + '</li>');
            });
          }

          if (rank == '') {
            metadata.find('.metadata-rank ul').append('<li>None</li>');
          } else {
            metadata.find('.metadata-rank ul').append('<li>' + rank + '</li>');
          }

          var wrapper = $("#container_for_<%= dom_id(reference_tree) %>");

          metadata.show();
          wrapper.css('bottom', metadata.height());

          var nodePosition  = self[0].offsetTop - wrapper[0].scrollTop;
          var visibleHeight = wrapper.height();

          if (nodePosition >= visibleHeight) {
            wrapper[0].scrollTop += nodePosition - visibleHeight + 36;
          }

          metadata.unspinner();
        });
      });
    <% end %>

      if ($('#working-trees li').length == 0) {
        $('#tab-titles li:first-child').hide();
      }
    });
  </script>
<% end %>
