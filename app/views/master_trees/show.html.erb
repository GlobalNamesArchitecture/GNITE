<div id="header">
  <h1><%= @master_tree.title %></h1>
</div>
<!-- Start of Left Tree -->
<div class="tree-column">
  <div id="treewrap-left">
    <div class="tree-background">
      <div class="breadcrumbs">
        <!--
        <ul>
          <li>Kingdom</li>
          <li>Phylum</li>
          <li>Class</li>
          <li>Order</li>
          <li>Family</li>
        </ul>
        -->
      </div>
      <div class="searchbar">
        <div class="grid-button">
          <%= link_to edit_master_tree_path do %>
            <%= image_tag 'settings-active.png', :class => 'icon' %>Edit Tree Information
          <% end %>
        </div>
        <!--<div class="grid-button">
          <a href="#"><img class="icon" src="/images/gridview.png"/>Grid view</a>
        </div>
        <form method="get" id="searchform" action="">
          <fieldset>
            <input type="text" value="Search this tree" name="search" id="search" onclick="this.value='';this.onclick=null;" />
          </fieldset>
        </form> -->
        <div class="clearfix"></div>
      </div>
                <div id="add-node-wrap">
                  <div id="add-node">
                    <div class="img"></div>
                    <a href="#">Add Node</a>
                  </div>
                </div>
      <div id="tree-container">
        <div id="master-tree"></div>
      </div>
    </div>
  </div>
</div>
<!-- End of Left Tree -->

<%= render :partial => 'right_tree' %>

<% content_for :javascript do %>
  <%= javascript_include_tag 'jquery.jstree' %>

  <script type="text/javascript" class="source">
    $(document).ready(function() {

          function contextMenuItems() {
            return { // Could be a function that should return an object like this one
              "create" : {
                "separator_before"  : false,
                "separator_after"  : true,
                "label"        : "Create",
                "action"      : function (obj) { this.create(obj); }
              },
              "rename" : {
                "separator_before"  : false,
                "separator_after"  : false,
                "label"        : "Rename",
                "action"      : function (obj) { this.rename(obj); }
              },
              "remove" : {
                "separator_before"  : false,
                "icon"        : false,
                "separator_after"  : true,
                "label"        : "Delete",
                "action"      : function (obj) { this.remove(obj); }
              },
              "cut" : {
                "separator_before"  : false,
                "separator_after"  : false,
                "label"        : "Cut",
                "action"      : function (obj) { this.cut(obj); }
              },
              "paste" : {
                "separator_before"  : false,
                "icon"        : false,
                "separator_after"  : false,
                "label"        : "Paste",
                "action"      : function (obj) { this.paste(obj); }
              }
            }
          }

      $("#add-node").click(function() {
        $("#master-tree").jstree("create");
      });

      $("#master-tree").jstree({
        "json_data": {
          "ajax": {
          "url": "<%= master_tree_nodes_path(:master_tree_id => @master_tree, :format => 'json') %>",
            "data" : function (node) {
              if (node.attr) {
                //to fix bug of asigning children to root
                if(node.attr("id") == ""){
                return { parent_id : $(".jstree-last.jstree-open").id }
                }else{
                  return { parent_id : node.attr("id") };
                };
              } else {
                return {};
              }
            }
          },
        },
        "contextmenu": {
          select_node: true,
          items : contextMenuItems
        },
        "plugins" : [ "themes", "json_data", "crrm", "ui",  "contextmenu", "dnd"]
        });


      $("#master-tree")
      .bind("create.jstree", function(event, data) {
        var newNode = data.rslt;

        var parentId;
        if (newNode.parent == -1) {
          parentId = null;
        } else {
          parentId = newNode.parent.attr("id");
        }

        $.ajax({
          type: "POST",
          url: "<%= master_tree_nodes_path(:master_tree_id => @master_tree, :format => 'json') %>",
          contentType: "application/json",
          dataType: 'json',
          data: JSON.stringify({node: {name: newNode.name, parent_id: parentId}}),
          success: function(data, textStatus, xhr) {
            newNode.obj.attr("id", data.node.id);
          }
        });
      });

      $("#master-tree").bind("loaded.jstree", function(event, data) {
        $("#master-tree").addClass("loaded");
      });

      $("#master-tree").bind("rename.jstree", function(event, data) {
        var updatedNode = data.rslt;
        $.ajax({
          type: "PUT",
          url: "/master_trees/<%= @master_tree.id %>/nodes/"+updatedNode.obj.attr("id")+".json",
          contentType: "application/json",
          dataType: 'json',
          data: JSON.stringify({node: {name: updatedNode.new_name }}),
          success: function(data, textStatus, xhr) {
            updatedNode.obj.attr("id", data.node.id);
          }
        });
       });
      $("#master-tree").bind("move_node.jstree", function(event, data) {
         var result = data.rslt;
         var movedNodeId = result.o.attr("id");
         var parentId = result.np.attr("id");
         var isCopy = data.rslt.cy;
         if(parentId == "master-tree"){
           parentId = null;
         }

         if (isCopy) {
           $.ajax({
             type: "POST",
             url: "/master_trees/<%= @master_tree.id %>/nodes/" + movedNodeId + "/clone.json",
             contentType: "application/json",
             dataType: 'json',
             data: JSON.stringify({node: {parent_id: parentId }}),
             success: function(data, textStatus, xhr) {
               result.o.attr("id", data.node.id);
             }
           });
         } else {
           $.ajax({
             type: "PUT",
             url: "/master_trees/<%= @master_tree.id %>/nodes/"+result.o.attr("id")+".json",
             contentType: "application/json",
             dataType: 'json',
             data: JSON.stringify({node: {parent_id: parentId }}),
             success: function(data, textStatus, xhr) {
               result.o.attr("id", data.node.id);
             }
           });
         }
       });

      $("#master-tree").bind("remove.jstree", function(event, data) {
        var node = data.rslt;
        $.ajax({
          type: "DELETE",
          url: "/master_trees/<%= @master_tree.id %>/nodes/"+node.obj.attr("id")+".json",
          contentType: "application/json",
          dataType: 'json',
        });
      });

     $('.jstree-clicked').live('dblclick', function() { $(".jstree-focused").jstree("rename"); });

      $('.tree-background').live('click', function(event) {
        var hitNode = (event.target.tagName == 'A') ||
                      (event.target.tagName == 'INS');

        if (! hitNode) {
          $(event.target).closest('.jstree').jstree('deselect_all');
        }
      });

      $('.tree-background').live('click', function(event) {
        $(event.target).find('.jstree').jstree('deselect_all');
      });
    });
</script>

<% end %>
