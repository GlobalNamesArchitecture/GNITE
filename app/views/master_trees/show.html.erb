<div id="header">
  <% if @master_tree.title == 'New Master Tree' %>
    <input type="text" id="master_tree_title"><span>Enter a title for your newly created tree.</span>
  <% else %>
    <h1><%= @master_tree.title %></h1>
  <% end %>
</div>

<div id="flash-wrapper">
  <%= render :partial => 'shared/flashes' -%>
</div>

<div class="tree-column clearfix">
  <div id="fluid-head"></div>

  <div id="treewrap-left">
    <div class="tree-background">
      <div class="breadcrumbs">
        <ul>
          <li>Breadcrumb</li>
          <li>Breadcrumb</li>
          <li>Breadcrumb</li>
        </ul>
      </div>

      <div class="searchbar clearfix">
        <div class="grid-button">
          <%= link_to edit_master_tree_path do %>
            Edit Tree Info
          <% end %>
        </div>

        <div class="grid-button">
          <%= link_to edit_master_tree_path do %>
            Publish To GNACLR
          <% end %>
        </div>

        <div id="add-node">
          <a href="#">Add Node</a>
        </div>
      </div>

      <div id="add-node-wrap">
        <div id="tree-container" data-database-id="<%= @master_tree.id %>">
          <div id="master-tree"></div>
        </div>
      </div>

      <%= render :partial => 'metadata' %>
    </div>
  </div>
</div>

<% content_for :javascript do %>
  <%= javascript_include_tag 'jquery.jstree.min' %>
<% end %>

<%= render :partial => "reference_trees" %>

<% content_for :javascript do %>
  <script type="text/javascript" class="source">
    $(document).ready(function() {
      function contextMenuItems() {
        return {
          "create" : {
            "separator_before"  : false,
            "separator_after"  : true,
            "label"        : "Create",
            "action"      : function (obj) { this.create(obj); }
          },
          "rename" : {
            "separator_before"  : false,
            "separator_after"  : false,
            "label"        : "Rename",
            "action"      : function (obj) { this.rename(obj); }
          },
          "remove" : {
            "separator_before"  : false,
            "icon"        : false,
            "separator_after"  : true,
            "label"        : "Delete",
            "action"      : function (obj) { this.remove(obj); }
          },
          "cut" : {
            "separator_before"  : false,
            "separator_after"  : false,
            "label"        : "Cut",
            "action"      : function (obj) { this.cut(obj); }
          },
          "paste" : {
            "separator_before"  : false,
            "icon"        : false,
            "separator_after"  : false,
            "label"        : "Paste",
            "action"      : function (obj) { this.paste(obj); }
          }
        }
      }

      $("#add-node").click(function() {
        $("#master-tree").jstree("create");
      });

      $("#master-tree").jstree({
        "json_data": {
          "ajax": {
          "url": "<%= master_tree_nodes_path(:master_tree_id => @master_tree, :format => 'json') %>",
            "data" : function (node) {
              if (node.attr) {
                return { parent_id : node.attr('id').replace('copy_', '') };
              } else {
                return {};
              }
            }
          },
        },
        "contextmenu": {
          select_node: true,
          items : contextMenuItems
        },
        "crrm": {
          "move": {
            "always_copy": "multitree"
          },
        },
        "plugins" : [ "themes", "json_data", "crrm", "ui",  "contextmenu", "dnd"]
        });


      $("#master-tree")
      .bind("create.jstree", function(event, data) {
        var newNode = data.rslt;

        var parentId;
        if (newNode.parent == -1) {
          parentId = null;
        } else {
          parentId = newNode.parent.attr("id");
        }

        $.ajax({
          type: "POST",
          url: "<%= master_tree_nodes_path(:master_tree_id => @master_tree, :format => 'json') %>",
          contentType: "application/json",
          dataType: 'json',
          data: JSON.stringify({node: {name: { name_string : newNode.name }, parent_id: parentId}}),
          success: function(data, textStatus, xhr) {
            newNode.obj.attr("id", data.node.id);
          }
        });
      });

      $("#master-tree").bind("loaded.jstree", function(event, data) {
        $("#master-tree").addClass("loaded");
      });

      $("#master-tree").bind("rename.jstree", function(event, data) {
        var updatedNode = data.rslt;
        $.ajax({
          type: "POST",
          url: "/master_trees/<%= @master_tree.id %>/nodes/"+updatedNode.obj.attr("id")+"/name_updates.json",
          contentType: "application/json",
          dataType: 'json',
          data: JSON.stringify({name: { name_string: updatedNode.new_name } }),
          success: function(data, textStatus, xhr) {
            updatedNode.obj.attr("id", data.node.id);
          }
        });
      });

      $("#master-tree").bind("move_node.jstree", function(event, data) {
         var result = data.rslt;
         var movedNodeId = result.o.attr("id");
         var parentId = result.np.attr("id");
         var isCopy = data.rslt.cy;
         if(parentId == "master-tree"){
           parentId = null;
         }

         if (isCopy) {
           $.ajax({
             type: "POST",
             url: "/master_trees/<%= @master_tree.id %>/nodes/" + movedNodeId + "/clone.json",
             contentType: "application/json",
             dataType: 'json',
             data: JSON.stringify({node: {parent_id: parentId }}),
             success: function(data, textStatus, xhr) {
               result.oc.attr('id', data.node.id);
             }
           });
         } else {
           $.ajax({
             type: "PUT",
             url: "/master_trees/<%= @master_tree.id %>/nodes/"+result.o.attr("id")+".json",
             contentType: "application/json",
             dataType: 'json',
             data: JSON.stringify({node: {parent_id: parentId }}),
             success: function(data, textStatus, xhr) {
               result.o.attr("id", data.node.id);
             }
           });
         }
      });

      $("#master-tree").bind("remove.jstree", function(event, data) {
        var node = data.rslt;
        $.ajax({
          type: "DELETE",
          url: "/master_trees/<%= @master_tree.id %>/nodes/"+node.obj.attr("id")+".json",
          contentType: "application/json",
          dataType: 'json',
        });
      });

      $('#master-tree .jstree-clicked').live('click', function() {
        var self     = $(this);
        var metadata = $('#treewrap-left .node-metadata');

        metadata.spinner();

        $.getJSON('/master_trees/<%= @master_tree.id %>/nodes/' + self.parent('li').attr('id'), function(data) {
          var rank             = $.trim(data.rank);
          var synonyms         = data.synonyms;
          var vernacular_names = data.vernacular_names;

          metadata.find('.metadata-section ul').empty();

          if (synonyms.length == 0) {
            metadata.find('.metadata-synonyms ul').append('<li>None</li>');
          } else {
            $.each(synonyms, function(index, synonym) {
              metadata.find('.metadata-synonyms ul').append('<li>' + synonym + '</li>');
            });
          }

          if (vernacular_names.length == 0) {
            metadata.find('.metadata-vernacular-names ul').append('<li>None</li>');
          } else {
            $.each(vernacular_names, function(index, vernacular_name) {
              metadata.find('.metadata-vernacular-names ul').append('<li>' + vernacular_name + '</li>');
            });
          }

          if (rank == '') {
            metadata.find('.metadata-rank ul').append('<li>None</li>');
          } else {
            metadata.find('.metadata-rank ul').append('<li>' + rank + '</li>');
          }

          var wrapper = $('#add-node-wrap');

          metadata.show();
          wrapper.css('bottom', metadata.height());

          var nodePosition  = self[0].offsetTop - wrapper[0].scrollTop;
          var visibleHeight = wrapper.height();

          if (nodePosition >= visibleHeight) {
            wrapper[0].scrollTop += nodePosition - visibleHeight + 36;
          }

          metadata.unspinner();
        });
      });

      $('#master-tree .jstree-clicked').live('dblclick', function() {
        $(".jstree-focused").jstree("rename");
      });

      $('#add-node-wrap').live('click', function(event) {
        var hitNode = (event.target.tagName == 'A') ||
                      (event.target.tagName == 'INS');

        if (!hitNode) {
          $(event.target).closest('.jstree').jstree('deselect_all');
          $('#add-node-wrap + .node-metadata').hide();
          $('#add-node-wrap').css('bottom', '20px');
        }
      });

      $('#add-node-wrap').live('click', function(event) {
        $(event.target).find('.jstree').jstree('deselect_all');
      });

      $('#master_tree_title')
        .focus()
        .blur(function() {
          var self = $(this);

          if ($.trim(self.val()) == '') {
            setTimeout(function() {
              self.focus();
            }, 10);

            self.next().text('Please enter a title for your tree.').addClass('error');
          } else {
            var title = self.val();

            $.post(<%= raw master_tree_path(@master_tree).to_json %>, { 'master_tree[title]' : title, '_method' : 'put' }, function() {
              self
                .next()
                  .remove()
                .end()
                .parent()
                  .append('<h1>' + title + '</h1>')
                .end()
                .remove();
            });
          }
        })
        .keypress(function(event) {
          if (event.which == 13) {
            $(this).blur();
          }
        });
    });
</script>

<% end %>
